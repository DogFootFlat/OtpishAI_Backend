buildscript {
    ext {
        queryDslVersion = '5.0.0'
    }
}
plugins {
    id 'java'
    id 'org.springframework.boot' version '3.2.4'
    id 'io.spring.dependency-management' version '1.1.4'
}


configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

group = 'com.otpishAI_Backend'
version = '0.0.1-SNAPSHOT'

java {
    sourceCompatibility = '17'
}

repositories {
    mavenCentral()
    maven{url "https://jitpack.io"}
}

dependencies {

    implementation 'org.springframework.boot:spring-boot-starter'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.thymeleaf.extras:thymeleaf-extras-springsecurity6'
    implementation 'org.hibernate:hibernate-vector:7.0.0.Alpha2'
    implementation 'org.springframework.boot:spring-boot-starter-data-jdbc'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    compileOnly 'org.projectlombok:lombok'
    implementation 'com.github.iamport:iamport-rest-client-java:0.2.23'
    annotationProcessor 'org.projectlombok:lombok'
    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'

    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'

    implementation 'io.jsonwebtoken:jjwt-api:0.12.5'
    runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.12.5'
    runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.12.5'

    implementation "com.querydsl:querydsl-jpa:${queryDslVersion}:jakarta"
    annotationProcessor "com.querydsl:querydsl-apt:${queryDslVersion}:jakarta"

    annotationProcessor "jakarta.persistence:jakarta.persistence-api"
    runtimeOnly "jakarta.persistence:jakarta.persistence-api"
    runtimeOnly 'org.postgresql:postgresql'
}

def querydslDir = file("src/main/generated")

sourceSets {
    main {
        java {
            srcDirs = ['src/main/java', querydslDir]
        }
    }
}

tasks.named('test') {
    useJUnitPlatform()
}

tasks.withType(JavaCompile) {
    options.annotationProcessorGeneratedSourcesDirectory = querydslDir
}

clean {
    delete querydslDir
}

bootJar {
    archiveFileName = 'OtpishAI_Backend.jar'  // JAR 파일 이름 설정
    mainClass = 'otpishAI.otpishAI_Backend.OtpishAI_Backend'  // 메인 클래스 경로 설정
}